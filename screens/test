{
  isLoading ? (
    <Animatable.View animation="slideInLeft" style={styles.header}>
      <View
        style={{
          backgroundColor: '#ffffff',
          top: '35%',
          left: '25%',
          zIndex: 3,
          width: '50%',
          height: 150,
          position: 'absolute',
          justifyContent: 'center',
          borderRadius: 15,
        }}>
        <ActivityIndicator size="large" color={'green'} style={{height: 50}} />
        <Text
          style={{
            fontSize: 20,
            color: 'black',
            fontFamily: 'Kanit',
            textAlign: 'center',
          }}>
          <Icon name="save" color="green" size={20} /> Saving data ...
        </Text>
      </View>
      <View
        style={{
          width: '130%',
          height: '190%',
          backgroundColor: '#00000040',
          position: 'absolute',
          zIndex: 2,
          justifyContent: 'center',
          alignItems: 'center',
        }}></View>

      <View style={{marginBottom: 20, flex: 0.1, zIndex: 1}}>
        <Text
          style={{
            fontSize: 28,
            color: '#fff',
            fontFamily: 'Kanit-SemiBold',

            textAlign: 'center',
          }}>
          JOB DETAIL
        </Text>
        <Text
          style={{
            fontSize: 20,
            color: '#fff',
            fontFamily: 'Kanit-Medium',

            textAlign: 'center',
          }}>
          {numRequest}
        </Text>
      </View>

      <ScrollView
        style={{
          width: '100%',
          flex: 0.8,
          padding: 10,
          borderRadius: 10,
        }}>
        <View style={styles.rowJob}>
          <View style={styles.rowJobDetail}>
            <Text style={styles.rowJobDetailText}>NumReq</Text>
          </View>

          <View style={styles.rowJobDetailBox}>
            <View
              style={{
                position: 'relative',
                borderBottomColor: '#fff',
                borderBottomWidth: 0.5,
                width: '80%',
                bottom: '20%',
              }}
            />
            <Text style={styles.rowJobDetailBoxText}>{numRequest}</Text>
          </View>
        </View>
        <View style={styles.rowJob}>
          <View style={styles.rowJobDetail}>
            <Text style={styles.rowJobDetailText}>Employee Code</Text>
          </View>

          <View style={styles.rowJobDetailBox}>
            <View
              style={{
                position: 'relative',
                borderBottomColor: '#fff',
                borderBottomWidth: 0.5,
                width: '80%',
                bottom: '20%',
              }}
            />
            <Text style={styles.rowJobDetailBoxText}>{UserEmpolyeeCode}</Text>
          </View>
        </View>
        <View style={styles.rowJob}>
          <View style={styles.rowJobDetail}>
            <Text style={styles.rowJobDetailText}>Employee Name</Text>
          </View>

          <View style={styles.rowJobDetailBox}>
            <View
              style={{
                position: 'relative',
                borderBottomColor: '#fff',
                borderBottomWidth: 0.5,
                width: '80%',
                bottom: '20%',
              }}
            />
            <Text style={styles.rowJobDetailBoxText}>{UserThName}</Text>
          </View>
        </View>

        <View style={styles.rowJob}>
          <View style={styles.rowJobDetail}>
            <Text style={styles.rowJobDetailText}>Date Create</Text>
          </View>

          <View style={styles.rowJobDetailBox}>
            <View
              style={{
                position: 'relative',
                borderBottomColor: '#fff',
                borderBottomWidth: 0.5,
                width: '80%',
                bottom: '20%',
              }}
            />
            <Text style={styles.rowJobDetailBoxText}>{dateCreate}</Text>
          </View>
        </View>

        <View style={styles.rowJob}>
          <View style={styles.rowJobDetail}>
            <Text style={styles.rowJobDetailText}>
              <Text style={{color: 'red'}}>* </Text>Due Date
            </Text>
            <View
              style={{
                position: 'relative',
                borderBottomColor: '#fff',
                borderBottomWidth: 0.5,
                width: '80%',
                top: '15%',
              }}
            />
          </View>

          <View
            style={[
              styles.rowJobDetailBox,
              {
                flexDirection: 'row',
                justifyContent: 'flex-start',
                alignItems: 'flex-start',
              },
            ]}>
            <View style={styles.btnChooseDate}>
              <TouchableOpacity
                title="Choose Date"
                style={{
                  flexDirection: 'row',
                  justifyContent: 'center',
                  alignItems: 'center',
                }}
                onPress={() => setOpen(true)}>
                <Icon name="calendar-outline" color="white" size={20} />
                <Text
                  style={{
                    margin: 7,
                    color: '#fff',
                    fontWeight: 'bold',
                    fontSize: 14,
                  }}>
                  Choose Date
                </Text>
              </TouchableOpacity>
            </View>

            <DatePicker
              modal
              open={open}
              date={date}
              is24hourSource="device"
              onConfirm={date => {
                setOpen(false);
                setDate(date);
                checkDate(date);
              }}
              onCancel={() => {
                setOpen(false);
              }}
            />
            {SelectedDate.dateCheck ? (
              <View style={{alignItems: 'center', justifyContent: 'center'}}>
                <Text
                  style={[
                    styles.textInput,
                    {
                      fontSize: 17,
                      margin: 5,
                      color: '#fff',
                    },
                  ]}>
                  {SelectedDate.dateValue}
                </Text>
              </View>
            ) : null}
          </View>
        </View>

        <View style={styles.rowJob}>
          <View style={styles.rowJobDetail}>
            <Text style={styles.rowJobDetailText}>
              <Text style={{color: 'red'}}>* </Text>Job Name
            </Text>
          </View>

          <View style={[styles.rowJobDetailBox, {backgroundColor: 'white'}]}>
            <TextInput
              style={[styles.textInput, {height: 100}]}
              placeholder="กรุณากรอกชื่องาน"
              onChangeText={onChangeJobNameHandler}
              ref={textInputJobName}
            />
          </View>
        </View>
        <View style={styles.rowJob}>
          <View style={styles.rowJobDetail}>
            <Text style={styles.rowJobDetailText}>
              <Text style={{color: 'red'}}>* </Text>Job Detail
            </Text>
          </View>

          <View style={[styles.rowJobDetailBox, {backgroundColor: 'white'}]}>
            <TextInput
              style={[styles.textInput, {height: 100}]}
              placeholder="กรุณากรอกรายละเอียดงาน"
              onChangeText={onChangeJobDetailHandler}
              ref={textInputJobDetail}
            />
          </View>
        </View>

        <View style={styles.rowJob}>
          <View style={styles.rowJobDetail}>
            <Text style={styles.rowJobDetailText}>
              <Text style={{color: 'red'}}>* </Text>Type of Job
            </Text>
            <View
              style={{
                position: 'relative',
                borderBottomColor: '#fff',
                borderBottomWidth: 0.5,
                width: '80%',
                top: '15%',
              }}
            />
          </View>

          <View
            style={[
              styles.pickerStyle,
              {
                overflow: 'hidden',
              },
            ]}>
            <Picker
              style={styles.pickerStyleDetail}
              selectedValue={dataTypeOfJob}
              itemStyle={styles.itemStyle}
              mode="dropdown"
              onValueChange={(itemValue, itemIndex) =>
                setDataTypeOfJob(itemValue) +
                getSelectedPickerValueTypeOfJob(itemValue)
              }>
              <Picker.Item label="Please Choose ..." value="" />
              <Picker.Item label="Hardware" value="Hardware" />
              <Picker.Item label="Software" value="Software" />
              <Picker.Item label="Intranet" value="Intranet" />
            </Picker>
          </View>
        </View>

        {SelectedTypeOfJob.intranet ? (
          <View style={styles.rowJob}>
            <View style={styles.rowJobDetail}>
              <Text style={styles.rowJobDetailText}>Intranet</Text>
              <View
                style={{
                  position: 'relative',
                  borderBottomColor: '#fff',
                  borderBottomWidth: 0.5,
                  width: '80%',
                  top: '15%',
                }}
              />
            </View>

            <View
              style={[
                styles.rowJobDetailBox,
                {flexDirection: 'row', marginBottom: 20},
              ]}>
              <CheckBox
                value={isSelectedIntranet}
                onValueChange={setSelectionIntranet}
                style={styles.checkbox}
              />
              <Text style={styles.label}>ขอใช้บริการระบบ Intranet</Text>
            </View>
          </View>
        ) : null}

        {SelectedTypeOfJob.software ? (
          <View style={styles.rowJob}>
            <View style={styles.rowJobDetail}>
              <Text style={styles.rowJobDetailText}>
                <Text style={{color: 'red'}}>* </Text>
                วัตถุประสงค์
              </Text>
              <View
                style={{
                  position: 'relative',
                  borderBottomColor: '#fff',
                  borderBottomWidth: 0.5,
                  width: '80%',
                  top: '15%',
                }}
              />
            </View>

            <View
              style={[
                styles.pickerStyle,
                {
                  overflow: 'hidden',
                },
              ]}>
              <Picker
                style={styles.pickerStyleDetail}
                selectedValue={dataSoftware}
                itemStyle={styles.itemStyle}
                mode="dropdown"
                onValueChange={(itemValue, itemIndex) =>
                  getSelectedPickerValueSoftware(itemValue) +
                  setDataSoftware(itemValue)
                }>
                <Picker.Item label="Please Choose ..." value="" />
                <Picker.Item label="Software ใหม่" value="Software ใหม่" />
                <Picker.Item
                  label="ปรับปรุงหรือแก้ไข"
                  value="ปรับปรุงหรือแก้ไข"
                />
                <Picker.Item label="ทดแทนของเดิม" value="ทดแทนของเดิม" />
                <Picker.Item label="อื่นๆ" value="อื่นๆ" />
              </Picker>
            </View>
          </View>
        ) : null}
        {SelectedSoftware.anotherSoftware ? (
          <View style={styles.rowJob}>
            <View style={styles.rowJobDetail}>
              <Text style={styles.rowJobDetailText}>
                <Text style={{color: 'red'}}>* </Text>Software อื่นๆ
              </Text>
            </View>

            <View style={[styles.rowJobDetailBox, {backgroundColor: 'white'}]}>
              <TextInput
                style={[styles.textInput, {height: 100}]}
                placeholder="กรุณากรอกรายละเอียดงาน Software"
                onChangeText={onChangeJobSoftwareDetailHandler}
                ref={textInputJobSoftwareDetail}
              />
            </View>
          </View>
        ) : null}

        {SelectedTypeOfJob.hardware ? (
          <View>
            <View style={styles.rowJob}>
              <View style={styles.rowJobDetail}>
                <Text style={styles.rowJobDetailText}>
                  <Text style={{color: 'red'}}>* </Text>
                  วัตถุประสงค์
                </Text>
                <View
                  style={{
                    position: 'relative',
                    borderBottomColor: '#fff',
                    borderBottomWidth: 0.5,
                    width: '80%',
                    top: '15%',
                  }}
                />
              </View>

              <View
                style={[
                  styles.pickerStyle,
                  {
                    overflow: 'hidden',
                  },
                ]}>
                <Picker
                  style={styles.pickerStyleDetail}
                  selectedValue={dataHardwareObjective}
                  itemStyle={styles.itemStyle}
                  mode="dropdown"
                  onValueChange={(itemValue, itemIndex) =>
                    getSelectedPickerValueHardwareObjective(itemValue) +
                    setDataHardwareObjective(itemValue)
                  }>
                  <Picker.Item label="Please Choose ..." value="" />
                  <Picker.Item
                    label="ซื้ออุปกรณ์ใหม่"
                    value="ซื้ออุปกรณ์ใหม่"
                  />
                  <Picker.Item label="ปรับปรุง" value="ปรับปรุง" />
                  <Picker.Item label="ทดแทนของเดิม" value="ทดแทนของเดิม" />
                  <Picker.Item
                    label="อื่นๆ"
                    value="hardware วัตถุประสงค์อื่นๆ"
                  />
                </Picker>
              </View>
            </View>

            {SelectedHardwareObjective.anotherHardwareObjective ? (
              <View style={styles.rowJob}>
                <View style={styles.rowJobDetail}>
                  <Text style={styles.rowJobDetailText}>
                    <Text style={{color: 'red'}}>* </Text>
                    วัตถุประสงค์ Hardware อื่นๆ
                  </Text>
                </View>

                <View
                  style={[styles.rowJobDetailBox, {backgroundColor: 'white'}]}>
                  <TextInput
                    style={[styles.textInput, {height: 100}]}
                    placeholder="กรุณากรอกรายละเอียด Hardware อื่นๆ"
                    onChangeText={onChangeJobHardwareDetailHandler}
                    ref={textInputJobHardwareDetail}
                  />
                </View>
              </View>
            ) : null}

            <View style={styles.rowJob}>
              <View style={styles.rowJobDetail}>
                <Text style={styles.rowJobDetailText}>
                  <Text style={{color: 'red'}}>* </Text>
                  ประเภทอุปกรณ์
                </Text>
                <View
                  style={{
                    position: 'relative',
                    borderBottomColor: '#fff',
                    borderBottomWidth: 0.5,
                    width: '80%',
                    top: '15%',
                  }}
                />
              </View>

              <View
                style={[
                  styles.pickerStyle,
                  {
                    overflow: 'hidden',
                  },
                ]}>
                <Picker
                  style={styles.pickerStyleDetail}
                  selectedValue={dataHardwareType}
                  itemStyle={styles.itemStyle}
                  mode="dropdown"
                  onValueChange={(itemValue, itemIndex) =>
                    getSelectedPickerValueHardwareType(itemValue) +
                    setDataHardwareType(itemValue)
                  }>
                  <Picker.Item label="Please Choose ..." value="" />
                  <Picker.Item label="Computer" value="Computer" />
                  <Picker.Item label="Server" value="Server" />
                  <Picker.Item label="Printer" value="Printer" />
                  <Picker.Item
                    label="อื่นๆ"
                    value="hardware ประเภทอุปกรณ์อื่นๆ"
                  />
                </Picker>
              </View>
            </View>

            {SelectedHardwareType.anotherHardwareType ? (
              <View style={styles.rowJob}>
                <View style={styles.rowJobDetail}>
                  <Text style={styles.rowJobDetailText}>
                    <Text style={{color: 'red'}}>* </Text>
                    ประเภท Hardware อื่นๆ
                  </Text>
                </View>

                <View
                  style={[styles.rowJobDetailBox, {backgroundColor: 'white'}]}>
                  <TextInput
                    style={[styles.textInput, {height: 100}]}
                    placeholder="กรุณากรอกประเภท Hardware อื่นๆ"
                    onChangeText={onChangeJobHardwareTypeDetailHandler}
                    ref={textInputJobHardwareTypeDetail}
                  />
                </View>
              </View>
            ) : null}
          </View>
        ) : null}

        <View style={styles.rowJob}>
          <View style={styles.rowJobDetail}>
            <Text style={styles.rowJobDetailText}>
              <Text style={{color: 'red'}}>* </Text>
              Priority
            </Text>
            <View
              style={{
                position: 'relative',
                borderBottomColor: '#fff',
                borderBottomWidth: 0.5,
                width: '80%',
                top: '15%',
              }}
            />
          </View>

          <View
            style={[
              styles.pickerStyle,
              {
                overflow: 'hidden',
              },
            ]}>
            <Picker
              style={styles.pickerStyleDetail}
              selectedValue={Priority}
              itemStyle={styles.itemStyle}
              mode="dropdown"
              onValueChange={(itemValue, itemIndex) => setPriority(itemValue)}>
              <Picker.Item label="Normal" value="Normal" />
              <Picker.Item label="High" value="High" />
            </Picker>
          </View>
        </View>

        <View style={styles.rowJob}>
          <View style={styles.rowJobDetail}>
            <Text style={styles.rowJobDetailText}>
              <Text style={{color: 'red'}}>* </Text>
              Budget
            </Text>
            <View
              style={{
                position: 'relative',
                borderBottomColor: '#fff',
                borderBottomWidth: 0.5,
                width: '80%',
                top: '15%',
              }}
            />
          </View>

          <View
            style={[
              styles.pickerStyle,
              {
                overflow: 'hidden',
              },
            ]}>
            <Picker
              style={styles.pickerStyleDetail}
              selectedValue={dataBudget}
              itemStyle={styles.itemStyle}
              mode="dropdown"
              onValueChange={(itemValue, itemIndex) =>
                getSelectedPickerValueBudget(itemValue) +
                setDataBudget(itemValue)
              }>
              <Picker.Item label="Please Choose ..." value="" />

              <Picker.Item label="Plan" value="Plan" />
              <Picker.Item label="Unplan" value="Unplan" />
            </Picker>
          </View>
        </View>

        {SelectedBudget.plan ? (
          <View style={styles.rowJob}>
            <View style={styles.rowJobDetail}>
              <Text style={styles.rowJobDetailText}>
                <Text style={{color: 'red'}}>* </Text>
                Budget (Plan)
              </Text>
            </View>

            <View style={[styles.rowJobDetailBox, {backgroundColor: 'white'}]}>
              <TextInput
                style={[styles.textInput, {height: 100}]}
                placeholder="กรุณากรอก Costcenter"
                onChangeText={onChangeCostcenterHandler}
                ref={textInputCostcenter}
              />
            </View>
          </View>
        ) : null}

        {SelectedBudget.unplan ? (
          <View style={styles.rowJob}>
            <View style={styles.rowJobDetail}>
              <Text style={styles.rowJobDetailText}>
                <Text style={{color: 'red'}}>* </Text>
                Budget (UnPlan)
              </Text>
            </View>

            <View style={[styles.rowJobDetailBox, {backgroundColor: 'white'}]}>
              <TextInput
                style={[styles.textInput, {height: 100}]}
                placeholder="กรุณากรอกรายละเอียด"
                onChangeText={onChangeBudgetHandler}
                ref={textInputBudget}
              />
            </View>
          </View>
        ) : null}

        <View style={styles.rowJob}>
          <View style={styles.rowJobDetail}>
            <Text style={styles.rowJobDetailText}>
              <Text style={{color: 'red'}}>* </Text>
              Comment
            </Text>
          </View>

          <View style={[styles.rowJobDetailBox, {backgroundColor: 'white'}]}>
            <TextInput
              style={[styles.textInput, {height: 100}]}
              placeholder="ข้อคิดเห็นเพิ่มเติม"
              onChangeText={onChangeCommentUserHandler}
              ref={textInputCommentUser}
            />
          </View>
        </View>

        <View style={styles.rowJob}>
          <View style={styles.rowJobDetail}>
            <Text style={styles.rowJobDetailText}>
              <Text style={{color: 'red'}}>* </Text>
              Number of Approvers
            </Text>
            <View
              style={{
                position: 'relative',
                borderBottomColor: '#fff',
                borderBottomWidth: 0.5,
                width: '80%',
                top: '15%',
              }}
            />
          </View>

          {/* //////////////////////////////////////เลือกผู้อนุมัติ /////////////////////////////*/}

          <View
            style={[
              styles.pickerStyle,
              {
                overflow: 'hidden',
              },
            ]}>
            <Picker
              style={styles.pickerStyleDetail}
              selectedValue={NumberAprrover}
              itemStyle={styles.itemStyle}
              mode="dropdown"
              onValueChange={(itemValue, itemIndex) =>
                getSelectedPickerValueNumberApprover(itemValue) +
                setNumberAprrover(itemValue)
              }>
              <Picker.Item
                label="Please Choose amount of Approver ..."
                value=""
              />
              <Picker.Item label="1" value="amount1" />
              <Picker.Item label="2" value="amount2" />
              <Picker.Item label="3" value="amount3" />
              <Picker.Item label="4" value="amount4" />
            </Picker>
          </View>
        </View>

        {SelectedNumberApprover.amount1 ? (
          <View style={styles.rowJob}>
            <View style={styles.rowJobDetail}>
              <Text style={styles.rowJobDetailText}>
                <Text style={{color: 'red'}}>* </Text>
                Approver 1st {DataTextApproverCode}
              </Text>
              <View
                style={{
                  position: 'relative',
                  borderBottomColor: '#fff',
                  borderBottomWidth: 0.5,
                  width: '80%',
                  top: '15%',
                }}
              />
            </View>

            <View
              style={[
                styles.pickerStyle,
                {
                  overflow: 'hidden',
                },
              ]}>
              <Picker
                style={styles.pickerStyleDetail}
                selectedValue={DataTextApprover}
                onValueChange={(item, index) =>
                  setDataTextApprover(item) + handlePickerApprover(item)
                }>
                <Picker.Item label="เลือกผู้อนุมัติคนที่ 1 ..." value="" />
                {ItemsApprover.map((item, index) => {
                  return (
                    <Picker.Item
                      key={index}
                      label={'คุณ ' + item.ThFullName}
                      value={item.ThFullName}
                    />
                  );
                })}
              </Picker>
            </View>
          </View>
        ) : SelectedNumberApprover.amount2 ? (
          <View>
            <View style={styles.rowJob}>
              <View style={styles.rowJobDetail}>
                <Text style={styles.rowJobDetailText}>
                  <Text style={{color: 'red'}}>* </Text>
                  Approver 1st {DataTextApproverCode}
                </Text>
                <View
                  style={{
                    position: 'relative',
                    borderBottomColor: '#fff',
                    borderBottomWidth: 0.5,
                    width: '80%',
                    top: '15%',
                  }}
                />
              </View>

              <View
                style={[
                  styles.pickerStyle,
                  {
                    overflow: 'hidden',
                  },
                ]}>
                <Picker
                  style={styles.pickerStyleDetail}
                  selectedValue={DataTextApprover}
                  onValueChange={(item, index) =>
                    setDataTextApprover(item) + handlePickerApprover(item)
                  }>
                  <Picker.Item label="เลือกผู้อนุมัติคนที่ 1 ..." value="" />
                  {ItemsApprover.map((item, index) => {
                    return (
                      <Picker.Item
                        key={index}
                        label={'คุณ ' + item.ThFullName}
                        value={item.ThFullName}
                      />
                    );
                  })}
                </Picker>
              </View>
            </View>

            <View style={styles.rowJob}>
              <View style={styles.rowJobDetail}>
                <Text style={styles.rowJobDetailText}>
                  <Text style={{color: 'red'}}>* </Text>
                  Approver 2st {DataTextApproverCode2}
                </Text>
                <View
                  style={{
                    position: 'relative',
                    borderBottomColor: '#fff',
                    borderBottomWidth: 0.5,
                    width: '80%',
                    top: '15%',
                  }}
                />
              </View>

              <View
                style={[
                  styles.pickerStyle,
                  {
                    overflow: 'hidden',
                  },
                ]}>
                <Picker
                  style={styles.pickerStyleDetail}
                  selectedValue={DataTextApprover2}
                  onValueChange={(item, index) =>
                    setDataTextApprover2(item) + handlePickerApprover2(item)
                  }>
                  <Picker.Item label="เลือกผู้อนุมัติคนที่ 2 ..." value="" />
                  {ItemsApprover.map((item, index) => {
                    return (
                      <Picker.Item
                        key={index}
                        label={'คุณ ' + item.ThFullName}
                        value={item.ThFullName}
                      />
                    );
                  })}
                </Picker>
              </View>
            </View>
          </View>
        ) : SelectedNumberApprover.amount3 ? (
          <View>
            <View style={styles.rowJob}>
              <View style={styles.rowJobDetail}>
                <Text style={styles.rowJobDetailText}>
                  <Text style={{color: 'red'}}>* </Text>
                  Approver 1st {DataTextApproverCode}
                </Text>
                <View
                  style={{
                    position: 'relative',
                    borderBottomColor: '#fff',
                    borderBottomWidth: 0.5,
                    width: '80%',
                    top: '15%',
                  }}
                />
              </View>

              <View
                style={[
                  styles.pickerStyle,
                  {
                    overflow: 'hidden',
                  },
                ]}>
                <Picker
                  style={styles.pickerStyleDetail}
                  selectedValue={DataTextApprover}
                  onValueChange={(item, index) =>
                    setDataTextApprover(item) + handlePickerApprover(item)
                  }>
                  <Picker.Item label="เลือกผู้อนุมัติคนที่ 1 ..." value="" />
                  {ItemsApprover.map((item, index) => {
                    return (
                      <Picker.Item
                        key={index}
                        label={'คุณ ' + item.ThFullName}
                        value={item.ThFullName}
                      />
                    );
                  })}
                </Picker>
              </View>
            </View>

            <View style={styles.rowJob}>
              <View style={styles.rowJobDetail}>
                <Text style={styles.rowJobDetailText}>
                  <Text style={{color: 'red'}}>* </Text>
                  Approver 2st {DataTextApproverCode2}
                </Text>
                <View
                  style={{
                    position: 'relative',
                    borderBottomColor: '#fff',
                    borderBottomWidth: 0.5,
                    width: '80%',
                    top: '15%',
                  }}
                />
              </View>

              <View
                style={[
                  styles.pickerStyle,
                  {
                    overflow: 'hidden',
                  },
                ]}>
                <Picker
                  style={styles.pickerStyleDetail}
                  selectedValue={DataTextApprover2}
                  onValueChange={(item, index) =>
                    setDataTextApprover2(item) + handlePickerApprover2(item)
                  }>
                  <Picker.Item label="เลือกผู้อนุมัติคนที่ 2 ..." value="" />
                  {ItemsApprover.map((item, index) => {
                    return (
                      <Picker.Item
                        key={index}
                        label={'คุณ ' + item.ThFullName}
                        value={item.ThFullName}
                      />
                    );
                  })}
                </Picker>
              </View>
            </View>

            <View style={styles.rowJob}>
              <View style={styles.rowJobDetail}>
                <Text style={styles.rowJobDetailText}>
                  <Text style={{color: 'red'}}>* </Text>
                  Approver 3st {DataTextApproverCode3}
                </Text>
                <View
                  style={{
                    position: 'relative',
                    borderBottomColor: '#fff',
                    borderBottomWidth: 0.5,
                    width: '80%',
                    top: '15%',
                  }}
                />
              </View>

              <View
                style={[
                  styles.pickerStyle,
                  {
                    overflow: 'hidden',
                  },
                ]}>
                <Picker
                  style={styles.pickerStyleDetail}
                  selectedValue={DataTextApprover3}
                  onValueChange={(item, index) =>
                    setDataTextApprover3(item) + handlePickerApprover3(item)
                  }>
                  <Picker.Item label="เลือกผู้อนุมัติคนที่ 3 ..." value="" />
                  {ItemsApprover.map((item, index) => {
                    return (
                      <Picker.Item
                        key={index}
                        label={'คุณ ' + item.ThFullName}
                        value={item.ThFullName}
                      />
                    );
                  })}
                </Picker>
              </View>
            </View>
          </View>
        ) : SelectedNumberApprover.amount4 ? (
          <View>
            <View style={styles.rowJob}>
              <View style={styles.rowJobDetail}>
                <Text style={styles.rowJobDetailText}>
                  <Text style={{color: 'red'}}>* </Text>
                  Approver 1st {DataTextApproverCode}
                </Text>
                <View
                  style={{
                    position: 'relative',
                    borderBottomColor: '#fff',
                    borderBottomWidth: 0.5,
                    width: '80%',
                    top: '15%',
                  }}
                />
              </View>

              <View
                style={[
                  styles.pickerStyle,
                  {
                    overflow: 'hidden',
                  },
                ]}>
                <Picker
                  style={styles.pickerStyleDetail}
                  selectedValue={DataTextApprover}
                  onValueChange={(item, index) =>
                    setDataTextApprover(item) + handlePickerApprover(item)
                  }>
                  <Picker.Item label="เลือกผู้อนุมัติคนที่ 1 ..." value="" />
                  {ItemsApprover.map((item, index) => {
                    return (
                      <Picker.Item
                        key={index}
                        label={'คุณ ' + item.ThFullName}
                        value={item.ThFullName}
                      />
                    );
                  })}
                </Picker>
              </View>
            </View>

            <View style={styles.rowJob}>
              <View style={styles.rowJobDetail}>
                <Text style={styles.rowJobDetailText}>
                  <Text style={{color: 'red'}}>* </Text>
                  Approver 2st {DataTextApproverCode2}
                </Text>
                <View
                  style={{
                    position: 'relative',
                    borderBottomColor: '#fff',
                    borderBottomWidth: 0.5,
                    width: '80%',
                    top: '15%',
                  }}
                />
              </View>

              <View
                style={[
                  styles.pickerStyle,
                  {
                    overflow: 'hidden',
                  },
                ]}>
                <Picker
                  style={styles.pickerStyleDetail}
                  selectedValue={DataTextApprover2}
                  onValueChange={(item, index) =>
                    setDataTextApprover2(item) + handlePickerApprover2(item)
                  }>
                  <Picker.Item label="เลือกผู้อนุมัติคนที่ 2 ..." value="" />
                  {ItemsApprover.map((item, index) => {
                    return (
                      <Picker.Item
                        key={index}
                        label={'คุณ ' + item.ThFullName}
                        value={item.ThFullName}
                      />
                    );
                  })}
                </Picker>
              </View>
            </View>

            <View style={styles.rowJob}>
              <View style={styles.rowJobDetail}>
                <Text style={styles.rowJobDetailText}>
                  <Text style={{color: 'red'}}>* </Text>
                  Approver 3st {DataTextApproverCode3}
                </Text>
                <View
                  style={{
                    position: 'relative',
                    borderBottomColor: '#fff',
                    borderBottomWidth: 0.5,
                    width: '80%',
                    top: '15%',
                  }}
                />
              </View>

              <View
                style={[
                  styles.pickerStyle,
                  {
                    overflow: 'hidden',
                  },
                ]}>
                <Picker
                  style={styles.pickerStyleDetail}
                  selectedValue={DataTextApprover3}
                  onValueChange={(item, index) =>
                    setDataTextApprover3(item) + handlePickerApprover3(item)
                  }>
                  <Picker.Item label="เลือกผู้อนุมัติคนที่ 3 ..." value="" />
                  {ItemsApprover.map((item, index) => {
                    return (
                      <Picker.Item
                        key={index}
                        label={'คุณ ' + item.ThFullName}
                        value={item.ThFullName}
                      />
                    );
                  })}
                </Picker>
              </View>
            </View>

            <View style={styles.rowJob}>
              <View style={styles.rowJobDetail}>
                <Text style={styles.rowJobDetailText}>
                  <Text style={{color: 'red'}}>* </Text>
                  Approver 4st {DataTextApproverCode4}
                </Text>
                <View
                  style={{
                    position: 'relative',
                    borderBottomColor: '#fff',
                    borderBottomWidth: 0.5,
                    width: '80%',
                    top: '15%',
                  }}
                />
              </View>

              <View
                style={[
                  styles.pickerStyle,
                  {
                    overflow: 'hidden',
                  },
                ]}>
                <Picker
                  style={styles.pickerStyleDetail}
                  selectedValue={DataTextApprover4}
                  onValueChange={(item, index) =>
                    setDataTextApprover4(item) + handlePickerApprover4(item)
                  }>
                  <Picker.Item label="เลือกผู้อนุมัติคนที่ 4 ..." value="" />
                  {ItemsApprover.map((item, index) => {
                    return (
                      <Picker.Item
                        key={index}
                        label={'คุณ ' + item.ThFullName}
                        value={item.ThFullName}
                      />
                    );
                  })}
                </Picker>
              </View>
            </View>
          </View>
        ) : null}

        {/* //////////////////////////////////////เลือกผู้อนุมัติ /////////////////////////////*/}

        <View style={[styles.rowJob, {height: '100%'}]}>
          <View style={styles.rowJobDetail}>
            <Text style={styles.rowJobDetailText}>
              <Text style={{color: 'red'}}>* </Text>Upload File
            </Text>
            <View
              style={{
                position: 'relative',
                borderBottomColor: '#fff',
                borderBottomWidth: 0.5,
                width: '80%',
                top: '15%',
              }}
            />
          </View>

          <View
            style={[
              styles.rowJobDetailBox,
              {
                flexDirection: 'row',
                justifyContent: 'center',
                alignItems: 'center',
                borderBottomEndRadius: 0,
                borderBottomStartRadius: 0,
              },
            ]}>
            <View
              style={[
                styles.btnChooseDate,
                {
                  width: 200,
                },
              ]}>
              <TouchableOpacity
                title="Upload File"
                style={{
                  flexDirection: 'column',
                  justifyContent: 'center',
                  alignItems: 'center',
                }}
                // onPress={() => chooseFile()}>
                onPress={() => setModalVisible(true)}>
                <Text
                  style={{
                    margin: 7,
                    color: '#fff',
                    fontWeight: 'bold',
                    fontSize: 14,
                  }}>
                  <Icon name="document-outline" color="white" size={20} />
                  Choose File/Take a photo
                </Text>
              </TouchableOpacity>
            </View>

            <Modal
              animationType="slide"
              transparent={true}
              visible={modalVisible}
              onRequestClose={() => {
                Alert.alert('Modal has been closed.');
                setModalVisible(!modalVisible);
              }}>
              <View style={styles.centeredView}>
                <View style={styles.modalView}>
                  <View
                    style={{
                      padding: 10,
                      left: 35,
                      alignSelf: 'flex-end',
                      top: -40,
                    }}>
                    <TouchableOpacity
                      onPress={() => setModalVisible(!modalVisible)}>
                      <Icon
                        name="close-circle-outline"
                        color="white"
                        size={30}
                      />
                    </TouchableOpacity>
                  </View>
                  <View
                    style={{
                      backgroundColor: '#00b26f',
                      height: 50,
                      borderRadius: 5,
                      width: 200,
                      marginTop: -45,
                      justifyContent: 'center',
                      alignItems: 'center',
                    }}>
                    <TouchableOpacity
                      title="Upload File"
                      style={{
                        flexDirection: 'row',
                      }}
                      onPress={() => {
                        chooseFile();
                        setModalVisible(!modalVisible);
                      }}>
                      <Icon name="document" color="white" size={25} />
                      <Text
                        style={{
                          margin: 7,
                          color: 'white',
                          fontWeight: 'bold',
                          fontSize: 14,
                        }}>
                        Choose From Library
                      </Text>
                    </TouchableOpacity>
                  </View>

                  <View
                    style={{
                      backgroundColor: '#0f52ba',
                      height: 50,
                      borderRadius: 5,
                      width: 200,
                      marginTop: 10,
                      justifyContent: 'center',
                      alignItems: 'center',
                    }}>
                    <TouchableOpacity
                      title="Upload File"
                      style={{
                        flexDirection: 'row',
                        justifyContent: 'center',
                        alignItems: 'center',
                      }}
                      onPress={() => {
                        takePhotoFromCamera();
                        setModalVisible(!modalVisible);
                      }}>
                      <Icon name="camera" color="white" size={25} />
                      <Text
                        style={{
                          margin: 7,
                          color: 'white',
                          fontWeight: 'bold',
                          fontSize: 14,
                        }}>
                        Take Photo
                      </Text>
                    </TouchableOpacity>
                  </View>
                </View>
              </View>
            </Modal>
          </View>

          <View
            style={{
              width: '100%',
              backgroundColor: '#00000030',
              alignItems: 'center',
              justifyContent: 'center',
              borderBottomEndRadius: 10,
              borderBottomStartRadius: 10,
              borderBottomWidth: 1,
              borderColor: '#3686c970',
              backgroundColor: 'white',
            }}>
            {/* {singlefile != null ? ( */}
            <ScrollView>
              {PickerFile != '' ? (
                <View
                  style={{
                    flexDirection: 'row',

                    padding: 10,
                  }}>
                  <View>
                    <View style={{flexDirection: 'column', width: '80%'}}>
                      <Text
                        style={[
                          styles.textStyle,
                          {textAlign: 'left', flexShrink: 1},
                        ]}>
                        File Name :{' '}
                        {PickerFile.path.split('/').pop()
                          ? PickerFile.path.split('/').pop()
                          : ''}
                      </Text>
                      <Text style={[styles.textStyle, {textAlign: 'left'}]}>
                        File Size :{' '}
                        {(
                          Number(PickerFile.size ? PickerFile.size : '') *
                          0.000001
                        ).toFixed(2)}{' '}
                        MB
                        {'\n'}
                      </Text>
                    </View>
                  </View>
                  <View
                    style={{
                      alignItems: 'flex-end',
                      marginVertical: 10,
                      marginBottom: 10,
                    }}>
                    <View>
                      <TouchableOpacity
                        style={{
                          backgroundColor: 'red',
                          width: 70,
                          height: 30,
                          borderRadius: 5,
                          alignItems: 'center',
                          justifyContent: 'space-around',
                          flexDirection: 'row',
                        }}
                        onPress={() => deletePickerFile()}>
                        <Text style={{color: '#ffff'}}>Delete</Text>
                        <Icon name="trash" color="white" size={18} />
                      </TouchableOpacity>
                    </View>
                  </View>
                </View>
              ) : null}
              {multipleFile.map((item, key) => (
                <View
                  key={key}
                  style={{
                    flexDirection: 'row',

                    padding: 10,
                  }}>
                  <View>
                    <View style={{flexDirection: 'column', width: '80%'}}>
                      <Text style={[styles.textStyle, {textAlign: 'left'}]}>
                        File Name:{' '}
                        {item.path.split('/').pop()
                          ? item.path.split('/').pop()
                          : ''}
                        {'\n'}
                        File Size:
                        {(
                          Number(item.size ? item.size : '') * 0.000001
                        ).toFixed(2)}{' '}
                        MB
                        {'\n'}
                      </Text>
                    </View>
                  </View>

                  <View
                    style={{
                      alignItems: 'flex-end',
                      marginVertical: 10,
                      marginBottom: 10,
                    }}>
                    <View>
                      <TouchableOpacity
                        style={{
                          backgroundColor: 'red',
                          width: 70,
                          height: 30,
                          borderRadius: 5,
                          alignItems: 'center',
                          justifyContent: 'space-around',
                          flexDirection: 'row',
                        }}
                        onPress={() => deleteMultipleFile(key)}>
                        <Text style={{color: '#ffff'}}>Delete</Text>
                        <Icon name="trash" color="white" size={18} />
                      </TouchableOpacity>
                    </View>
                  </View>
                </View>
              ))}
            </ScrollView>
            {/* //{' '}
             <Text style={styles.textStyle}>
               // File Name: {singlefile.name ? singleFile.name : ''}
               // {'\n'}
               // Type: {singleFile.type ? singleFile.type : ''}
               // {'\n'}
               // File Size: {singleFile.size ? singleFile.size : ''}
               // {'\n'}
               // URI: {singleFile.uri ? singleFile.uri : ''}
               // {'\n'}
               //{' '}
             </Text> */}
            {/* ) : null} */}
          </View>
        </View>
      </ScrollView>

      <View style={styles.btnView}>
        <TouchableOpacity
          style={{flexDirection: 'row'}}
          onPress={() => handleSave()}>
          <Icon name="save-outline" color="#fff" size={25} />
          <Text
            style={[
              styles.btnViewText,
              {fontFamily: 'Kanit-Medium', color: '#fff'},
            ]}>
            Save
          </Text>
        </TouchableOpacity>
      </View>
    </Animatable.View>
  ) : (
    <Animatable.View animation="slideInLeft" style={[styles.header]}>
      <View style={{marginBottom: 20, flex: 0.1}}>
        <Text
          style={{
            fontSize: 28,
            color: '#fff',
            fontFamily: 'Kanit-SemiBold',

            textAlign: 'center',
          }}>
          JOB DETAIL
        </Text>
        <Text
          style={{
            fontSize: 20,
            color: '#fff',
            fontFamily: 'Kanit-Medium',

            textAlign: 'center',
          }}>
          {numRequest}
        </Text>
      </View>

      <ScrollView
        style={{
          width: '100%',
          flex: 0.8,
          padding: 10,
          borderRadius: 10,
        }}>
        {/* <View style={styles.rowJob}>
              <View style={styles.rowJobDetail}>
                <Text style={styles.rowJobDetailText}>
                  <Text style={{color: 'red'}}>* </Text>
                  Image
                </Text>
              </View>

              <View
                style={[
                  styles.rowJobDetailBox,
                  {backgroundColor: 'white', padding: 5},
                ]}>
                <Image
                  resizeMode="cover"
                  style={{width: '100%', height: 300}}
                  source={{
                    uri: IMAGE_PATH,
                  }}
                />
              </View>
            </View> */}

        <View style={styles.rowJob}>
          <View style={styles.rowJobDetail}>
            <Text style={styles.rowJobDetailText}>NumReq</Text>
          </View>

          <View style={styles.rowJobDetailBox}>
            <View
              style={{
                position: 'relative',
                borderBottomColor: '#fff',
                borderBottomWidth: 0.5,
                width: '80%',
                bottom: '20%',
              }}
            />
            <Text style={styles.rowJobDetailBoxText}>{numRequest}</Text>
          </View>
        </View>
        <View style={styles.rowJob}>
          <View style={styles.rowJobDetail}>
            <Text style={styles.rowJobDetailText}>Employee Code</Text>
          </View>

          <View style={styles.rowJobDetailBox}>
            <View
              style={{
                position: 'relative',
                borderBottomColor: '#fff',
                borderBottomWidth: 0.5,
                width: '80%',
                bottom: '20%',
              }}
            />
            <Text style={styles.rowJobDetailBoxText}>{UserEmpolyeeCode}</Text>
          </View>
        </View>
        <View style={styles.rowJob}>
          <View style={styles.rowJobDetail}>
            <Text style={styles.rowJobDetailText}>Employee Name</Text>
          </View>

          <View style={styles.rowJobDetailBox}>
            <View
              style={{
                position: 'relative',
                borderBottomColor: '#fff',
                borderBottomWidth: 0.5,
                width: '80%',
                bottom: '20%',
              }}
            />
            <Text style={styles.rowJobDetailBoxText}>{UserThName}</Text>
          </View>
        </View>

        <View style={styles.rowJob}>
          <View style={styles.rowJobDetail}>
            <Text style={styles.rowJobDetailText}>Date Create</Text>
          </View>

          <View style={styles.rowJobDetailBox}>
            <View
              style={{
                position: 'relative',
                borderBottomColor: '#fff',
                borderBottomWidth: 0.5,
                width: '80%',
                bottom: '20%',
              }}
            />
            <Text style={styles.rowJobDetailBoxText}>{dateCreate}</Text>
          </View>
        </View>

        <View style={styles.rowJob}>
          <View style={styles.rowJobDetail}>
            <Text style={styles.rowJobDetailText}>
              <Text style={{color: 'red'}}>* </Text>Due Date
            </Text>
            <View
              style={{
                position: 'relative',
                borderBottomColor: '#fff',
                borderBottomWidth: 0.5,
                width: '80%',
                top: '15%',
              }}
            />
          </View>

          <View
            style={[
              styles.rowJobDetailBox,
              {
                flexDirection: 'row',
                justifyContent: 'flex-start',
                alignItems: 'flex-start',
              },
            ]}>
            <View style={styles.btnChooseDate}>
              <TouchableOpacity
                title="Choose Date"
                style={{
                  flexDirection: 'row',
                  justifyContent: 'center',
                  alignItems: 'center',
                }}
                onPress={() => setOpen(true)}>
                <Icon name="calendar-outline" color="white" size={20} />
                <Text
                  style={{
                    margin: 7,
                    color: '#fff',
                    fontWeight: 'bold',
                    fontSize: 14,
                  }}>
                  Choose Date
                </Text>
              </TouchableOpacity>
            </View>

            <DatePicker
              modal
              open={open}
              date={date}
              is24hourSource="device"
              onConfirm={date => {
                setOpen(false);
                setDate(date);
                checkDate(date);
              }}
              onCancel={() => {
                setOpen(false);
              }}
            />
            {SelectedDate.dateCheck ? (
              <View style={{alignItems: 'center', justifyContent: 'center'}}>
                <Text
                  style={[
                    styles.textInput,
                    {
                      fontSize: 17,
                      margin: 5,
                      color: '#fff',
                    },
                  ]}>
                  {SelectedDate.dateValue}
                </Text>
              </View>
            ) : null}
          </View>
        </View>

        <View style={styles.rowJob}>
          <View style={styles.rowJobDetail}>
            <Text style={styles.rowJobDetailText}>
              <Text style={{color: 'red'}}>* </Text>Job Name
            </Text>
          </View>

          <View style={[styles.rowJobDetailBox, {backgroundColor: 'white'}]}>
            <TextInput
              style={[styles.textInput, {height: 100}]}
              placeholder="กรุณากรอกชื่องาน"
              onChangeText={onChangeJobNameHandler}
              ref={textInputJobName}
            />
          </View>
        </View>
        <View style={styles.rowJob}>
          <View style={styles.rowJobDetail}>
            <Text style={styles.rowJobDetailText}>
              <Text style={{color: 'red'}}>* </Text>Job Detail
            </Text>
          </View>

          <View style={[styles.rowJobDetailBox, {backgroundColor: 'white'}]}>
            <TextInput
              style={[styles.textInput, {height: 100}]}
              placeholder="กรุณากรอกรายละเอียดงาน"
              onChangeText={onChangeJobDetailHandler}
              ref={textInputJobDetail}
            />
          </View>
        </View>

        <View style={styles.rowJob}>
          <View style={styles.rowJobDetail}>
            <Text style={styles.rowJobDetailText}>
              <Text style={{color: 'red'}}>* </Text>Type of Job
            </Text>
            <View
              style={{
                position: 'relative',
                borderBottomColor: '#fff',
                borderBottomWidth: 0.5,
                width: '80%',
                top: '15%',
              }}
            />
          </View>

          <View
            style={[
              styles.pickerStyle,
              {
                overflow: 'hidden',
              },
            ]}>
            <Picker
              style={styles.pickerStyleDetail}
              selectedValue={dataTypeOfJob}
              itemStyle={styles.itemStyle}
              mode="dropdown"
              onValueChange={(itemValue, itemIndex) =>
                setDataTypeOfJob(itemValue) +
                getSelectedPickerValueTypeOfJob(itemValue)
              }>
              <Picker.Item label="Please Choose ..." value="" />
              <Picker.Item label="Hardware" value="Hardware" />
              <Picker.Item label="Software" value="Software" />
              <Picker.Item label="Intranet" value="Intranet" />
            </Picker>
          </View>
        </View>

        {SelectedTypeOfJob.intranet ? (
          <View style={styles.rowJob}>
            <View style={styles.rowJobDetail}>
              <Text style={styles.rowJobDetailText}>Intranet</Text>
              <View
                style={{
                  position: 'relative',
                  borderBottomColor: '#fff',
                  borderBottomWidth: 0.5,
                  width: '80%',
                  top: '15%',
                }}
              />
            </View>

            <View
              style={[
                styles.rowJobDetailBox,
                {flexDirection: 'row', marginBottom: 20},
              ]}>
              <CheckBox
                value={isSelectedIntranet}
                onValueChange={setSelectionIntranet}
                style={styles.checkbox}
              />
              <Text style={styles.label}>ขอใช้บริการระบบ Intranet</Text>
            </View>
          </View>
        ) : null}

        {SelectedTypeOfJob.software ? (
          <View style={styles.rowJob}>
            <View style={styles.rowJobDetail}>
              <Text style={styles.rowJobDetailText}>
                <Text style={{color: 'red'}}>* </Text>
                วัตถุประสงค์
              </Text>
              <View
                style={{
                  position: 'relative',
                  borderBottomColor: '#fff',
                  borderBottomWidth: 0.5,
                  width: '80%',
                  top: '15%',
                }}
              />
            </View>

            <View
              style={[
                styles.pickerStyle,
                {
                  overflow: 'hidden',
                },
              ]}>
              <Picker
                style={styles.pickerStyleDetail}
                selectedValue={dataSoftware}
                itemStyle={styles.itemStyle}
                mode="dropdown"
                onValueChange={(itemValue, itemIndex) =>
                  getSelectedPickerValueSoftware(itemValue) +
                  setDataSoftware(itemValue)
                }>
                <Picker.Item label="Please Choose ..." value="" />
                <Picker.Item label="Software ใหม่" value="Software ใหม่" />
                <Picker.Item
                  label="ปรับปรุงหรือแก้ไข"
                  value="ปรับปรุงหรือแก้ไข"
                />
                <Picker.Item label="ทดแทนของเดิม" value="ทดแทนของเดิม" />
                <Picker.Item label="อื่นๆ" value="อื่นๆ" />
              </Picker>
            </View>
          </View>
        ) : null}
        {SelectedSoftware.anotherSoftware ? (
          <View style={styles.rowJob}>
            <View style={styles.rowJobDetail}>
              <Text style={styles.rowJobDetailText}>
                <Text style={{color: 'red'}}>* </Text>Software อื่นๆ
              </Text>
            </View>

            <View style={[styles.rowJobDetailBox, {backgroundColor: 'white'}]}>
              <TextInput
                style={[styles.textInput, {height: 100}]}
                placeholder="กรุณากรอกรายละเอียดงาน Software"
                onChangeText={onChangeJobSoftwareDetailHandler}
                ref={textInputJobSoftwareDetail}
              />
            </View>
          </View>
        ) : null}

        {SelectedTypeOfJob.hardware ? (
          <View>
            <View style={styles.rowJob}>
              <View style={styles.rowJobDetail}>
                <Text style={styles.rowJobDetailText}>
                  <Text style={{color: 'red'}}>* </Text>
                  วัตถุประสงค์
                </Text>
                <View
                  style={{
                    position: 'relative',
                    borderBottomColor: '#fff',
                    borderBottomWidth: 0.5,
                    width: '80%',
                    top: '15%',
                  }}
                />
              </View>

              <View
                style={[
                  styles.pickerStyle,
                  {
                    overflow: 'hidden',
                  },
                ]}>
                <Picker
                  style={styles.pickerStyleDetail}
                  selectedValue={dataHardwareObjective}
                  itemStyle={styles.itemStyle}
                  mode="dropdown"
                  onValueChange={(itemValue, itemIndex) =>
                    getSelectedPickerValueHardwareObjective(itemValue) +
                    setDataHardwareObjective(itemValue)
                  }>
                  <Picker.Item label="Please Choose ..." value="" />
                  <Picker.Item
                    label="ซื้ออุปกรณ์ใหม่"
                    value="ซื้ออุปกรณ์ใหม่"
                  />
                  <Picker.Item label="ปรับปรุง" value="ปรับปรุง" />
                  <Picker.Item label="ทดแทนของเดิม" value="ทดแทนของเดิม" />
                  <Picker.Item
                    label="อื่นๆ"
                    value="hardware วัตถุประสงค์อื่นๆ"
                  />
                </Picker>
              </View>
            </View>

            {SelectedHardwareObjective.anotherHardwareObjective ? (
              <View style={styles.rowJob}>
                <View style={styles.rowJobDetail}>
                  <Text style={styles.rowJobDetailText}>
                    <Text style={{color: 'red'}}>* </Text>
                    วัตถุประสงค์ Hardware อื่นๆ
                  </Text>
                </View>

                <View
                  style={[styles.rowJobDetailBox, {backgroundColor: 'white'}]}>
                  <TextInput
                    style={[styles.textInput, {height: 100}]}
                    placeholder="กรุณากรอกรายละเอียด Hardware อื่นๆ"
                    onChangeText={onChangeJobHardwareDetailHandler}
                    ref={textInputJobHardwareDetail}
                  />
                </View>
              </View>
            ) : null}

            <View style={styles.rowJob}>
              <View style={styles.rowJobDetail}>
                <Text style={styles.rowJobDetailText}>
                  <Text style={{color: 'red'}}>* </Text>
                  ประเภทอุปกรณ์
                </Text>
                <View
                  style={{
                    position: 'relative',
                    borderBottomColor: '#fff',
                    borderBottomWidth: 0.5,
                    width: '80%',
                    top: '15%',
                  }}
                />
              </View>

              <View
                style={[
                  styles.pickerStyle,
                  {
                    overflow: 'hidden',
                  },
                ]}>
                <Picker
                  style={styles.pickerStyleDetail}
                  selectedValue={dataHardwareType}
                  itemStyle={styles.itemStyle}
                  mode="dropdown"
                  onValueChange={(itemValue, itemIndex) =>
                    getSelectedPickerValueHardwareType(itemValue) +
                    setDataHardwareType(itemValue)
                  }>
                  <Picker.Item label="Please Choose ..." value="" />
                  <Picker.Item label="Computer" value="Computer" />
                  <Picker.Item label="Server" value="Server" />
                  <Picker.Item label="Printer" value="Printer" />
                  <Picker.Item
                    label="อื่นๆ"
                    value="hardware ประเภทอุปกรณ์อื่นๆ"
                  />
                </Picker>
              </View>
            </View>

            {SelectedHardwareType.anotherHardwareType ? (
              <View style={styles.rowJob}>
                <View style={styles.rowJobDetail}>
                  <Text style={styles.rowJobDetailText}>
                    <Text style={{color: 'red'}}>* </Text>
                    ประเภท Hardware อื่นๆ
                  </Text>
                </View>

                <View
                  style={[styles.rowJobDetailBox, {backgroundColor: 'white'}]}>
                  <TextInput
                    style={[styles.textInput, {height: 100}]}
                    placeholder="กรุณากรอกประเภท Hardware อื่นๆ"
                    onChangeText={onChangeJobHardwareTypeDetailHandler}
                    ref={textInputJobHardwareTypeDetail}
                  />
                </View>
              </View>
            ) : null}
          </View>
        ) : null}

        <View style={styles.rowJob}>
          <View style={styles.rowJobDetail}>
            <Text style={styles.rowJobDetailText}>
              <Text style={{color: 'red'}}>* </Text>
              Priority
            </Text>
            <View
              style={{
                position: 'relative',
                borderBottomColor: '#fff',
                borderBottomWidth: 0.5,
                width: '80%',
                top: '15%',
              }}
            />
          </View>

          <View
            style={[
              styles.pickerStyle,
              {
                overflow: 'hidden',
              },
            ]}>
            <Picker
              style={styles.pickerStyleDetail}
              selectedValue={Priority}
              itemStyle={styles.itemStyle}
              mode="dropdown"
              onValueChange={(itemValue, itemIndex) => setPriority(itemValue)}>
              <Picker.Item label="Normal" value="Normal" />
              <Picker.Item label="High" value="High" />
            </Picker>
          </View>
        </View>

        <View style={styles.rowJob}>
          <View style={styles.rowJobDetail}>
            <Text style={styles.rowJobDetailText}>
              <Text style={{color: 'red'}}>* </Text>
              Budget
            </Text>
            <View
              style={{
                position: 'relative',
                borderBottomColor: '#fff',
                borderBottomWidth: 0.5,
                width: '80%',
                top: '15%',
              }}
            />
          </View>

          <View
            style={[
              styles.pickerStyle,
              {
                overflow: 'hidden',
              },
            ]}>
            <Picker
              style={styles.pickerStyleDetail}
              selectedValue={dataBudget}
              itemStyle={styles.itemStyle}
              mode="dropdown"
              onValueChange={(itemValue, itemIndex) =>
                getSelectedPickerValueBudget(itemValue) +
                setDataBudget(itemValue)
              }>
              <Picker.Item label="Please Choose ..." value="" />

              <Picker.Item label="Plan" value="Plan" />
              <Picker.Item label="Unplan" value="Unplan" />
            </Picker>
          </View>
        </View>

        {SelectedBudget.plan ? (
          <View style={styles.rowJob}>
            <View style={styles.rowJobDetail}>
              <Text style={styles.rowJobDetailText}>
                <Text style={{color: 'red'}}>* </Text>
                Budget (Plan)
              </Text>
            </View>

            <View style={[styles.rowJobDetailBox, {backgroundColor: 'white'}]}>
              <TextInput
                style={[styles.textInput, {height: 100}]}
                placeholder="กรุณากรอก Costcenter"
                onChangeText={onChangeCostcenterHandler}
                ref={textInputCostcenter}
              />
            </View>
          </View>
        ) : null}

        {SelectedBudget.unplan ? (
          <View style={styles.rowJob}>
            <View style={styles.rowJobDetail}>
              <Text style={styles.rowJobDetailText}>
                <Text style={{color: 'red'}}>* </Text>
                Budget (UnPlan)
              </Text>
            </View>

            <View style={[styles.rowJobDetailBox, {backgroundColor: 'white'}]}>
              <TextInput
                style={[styles.textInput, {height: 100}]}
                placeholder="กรุณากรอกรายละเอียด"
                onChangeText={onChangeBudgetHandler}
                ref={textInputBudget}
              />
            </View>
          </View>
        ) : null}

        <View style={styles.rowJob}>
          <View style={styles.rowJobDetail}>
            <Text style={styles.rowJobDetailText}>
              <Text style={{color: 'red'}}>* </Text>
              Comment
            </Text>
          </View>

          <View style={[styles.rowJobDetailBox, {backgroundColor: 'white'}]}>
            <TextInput
              style={[styles.textInput, {height: 100}]}
              placeholder="ข้อคิดเห็นเพิ่มเติม"
              onChangeText={onChangeCommentUserHandler}
              ref={textInputCommentUser}
            />
          </View>
        </View>

        <View style={styles.rowJob}>
          <View style={styles.rowJobDetail}>
            <Text style={styles.rowJobDetailText}>
              <Text style={{color: 'red'}}>* </Text>
              Number of Approvers
            </Text>
            <View
              style={{
                position: 'relative',
                borderBottomColor: '#fff',
                borderBottomWidth: 0.5,
                width: '80%',
                top: '15%',
              }}
            />
          </View>

          {/* //////////////////////////////////////เลือกผู้อนุมัติ /////////////////////////////*/}

          <View
            style={[
              styles.pickerStyle,
              {
                overflow: 'hidden',
              },
            ]}>
            <Picker
              style={styles.pickerStyleDetail}
              selectedValue={NumberAprrover}
              itemStyle={styles.itemStyle}
              mode="dropdown"
              onValueChange={(itemValue, itemIndex) =>
                getSelectedPickerValueNumberApprover(itemValue) +
                setNumberAprrover(itemValue)
              }>
              <Picker.Item
                label="Please Choose amount of Approver ..."
                value=""
              />
              <Picker.Item label="1" value="amount1" />
              <Picker.Item label="2" value="amount2" />
              <Picker.Item label="3" value="amount3" />
              <Picker.Item label="4" value="amount4" />
            </Picker>
          </View>
        </View>

        {SelectedNumberApprover.amount1 ? (
          <View style={styles.rowJob}>
            <View style={styles.rowJobDetail}>
              <Text style={styles.rowJobDetailText}>
                <Text style={{color: 'red'}}>* </Text>
                Approver 1st {DataTextApproverCode}
              </Text>
              <View
                style={{
                  position: 'relative',
                  borderBottomColor: '#fff',
                  borderBottomWidth: 0.5,
                  width: '80%',
                  top: '15%',
                }}
              />
            </View>

            <View
              style={[
                styles.pickerStyle,
                {
                  overflow: 'hidden',
                },
              ]}>
              <Picker
                style={styles.pickerStyleDetail}
                selectedValue={DataTextApprover}
                onValueChange={(item, index) =>
                  setDataTextApprover(item) + handlePickerApprover(item)
                }>
                <Picker.Item label="เลือกผู้อนุมัติคนที่ 1 ..." value="" />
                {ItemsApprover.map((item, index) => {
                  return (
                    <Picker.Item
                      key={index}
                      label={'คุณ ' + item.ThFullName}
                      value={item.ThFullName}
                    />
                  );
                })}
              </Picker>
            </View>
          </View>
        ) : SelectedNumberApprover.amount2 ? (
          <View>
            <View style={styles.rowJob}>
              <View style={styles.rowJobDetail}>
                <Text style={styles.rowJobDetailText}>
                  <Text style={{color: 'red'}}>* </Text>
                  Approver 1st {DataTextApproverCode}
                </Text>
                <View
                  style={{
                    position: 'relative',
                    borderBottomColor: '#fff',
                    borderBottomWidth: 0.5,
                    width: '80%',
                    top: '15%',
                  }}
                />
              </View>

              <View
                style={[
                  styles.pickerStyle,
                  {
                    overflow: 'hidden',
                  },
                ]}>
                <Picker
                  style={styles.pickerStyleDetail}
                  selectedValue={DataTextApprover}
                  onValueChange={(item, index) =>
                    setDataTextApprover(item) + handlePickerApprover(item)
                  }>
                  <Picker.Item label="เลือกผู้อนุมัติคนที่ 1 ..." value="" />
                  {ItemsApprover.map((item, index) => {
                    return (
                      <Picker.Item
                        key={index}
                        label={'คุณ ' + item.ThFullName}
                        value={item.ThFullName}
                      />
                    );
                  })}
                </Picker>
              </View>
            </View>

            <View style={styles.rowJob}>
              <View style={styles.rowJobDetail}>
                <Text style={styles.rowJobDetailText}>
                  <Text style={{color: 'red'}}>* </Text>
                  Approver 2st {DataTextApproverCode2}
                </Text>
                <View
                  style={{
                    position: 'relative',
                    borderBottomColor: '#fff',
                    borderBottomWidth: 0.5,
                    width: '80%',
                    top: '15%',
                  }}
                />
              </View>

              <View
                style={[
                  styles.pickerStyle,
                  {
                    overflow: 'hidden',
                  },
                ]}>
                <Picker
                  style={styles.pickerStyleDetail}
                  selectedValue={DataTextApprover2}
                  onValueChange={(item, index) =>
                    setDataTextApprover2(item) + handlePickerApprover2(item)
                  }>
                  <Picker.Item label="เลือกผู้อนุมัติคนที่ 2 ..." value="" />
                  {ItemsApprover.map((item, index) => {
                    return (
                      <Picker.Item
                        key={index}
                        label={'คุณ ' + item.ThFullName}
                        value={item.ThFullName}
                      />
                    );
                  })}
                </Picker>
              </View>
            </View>
          </View>
        ) : SelectedNumberApprover.amount3 ? (
          <View>
            <View style={styles.rowJob}>
              <View style={styles.rowJobDetail}>
                <Text style={styles.rowJobDetailText}>
                  <Text style={{color: 'red'}}>* </Text>
                  Approver 1st {DataTextApproverCode}
                </Text>
                <View
                  style={{
                    position: 'relative',
                    borderBottomColor: '#fff',
                    borderBottomWidth: 0.5,
                    width: '80%',
                    top: '15%',
                  }}
                />
              </View>

              <View
                style={[
                  styles.pickerStyle,
                  {
                    overflow: 'hidden',
                  },
                ]}>
                <Picker
                  style={styles.pickerStyleDetail}
                  selectedValue={DataTextApprover}
                  onValueChange={(item, index) =>
                    setDataTextApprover(item) + handlePickerApprover(item)
                  }>
                  <Picker.Item label="เลือกผู้อนุมัติคนที่ 1 ..." value="" />
                  {ItemsApprover.map((item, index) => {
                    return (
                      <Picker.Item
                        key={index}
                        label={'คุณ ' + item.ThFullName}
                        value={item.ThFullName}
                      />
                    );
                  })}
                </Picker>
              </View>
            </View>

            <View style={styles.rowJob}>
              <View style={styles.rowJobDetail}>
                <Text style={styles.rowJobDetailText}>
                  <Text style={{color: 'red'}}>* </Text>
                  Approver 2st {DataTextApproverCode2}
                </Text>
                <View
                  style={{
                    position: 'relative',
                    borderBottomColor: '#fff',
                    borderBottomWidth: 0.5,
                    width: '80%',
                    top: '15%',
                  }}
                />
              </View>

              <View
                style={[
                  styles.pickerStyle,
                  {
                    overflow: 'hidden',
                  },
                ]}>
                <Picker
                  style={styles.pickerStyleDetail}
                  selectedValue={DataTextApprover2}
                  onValueChange={(item, index) =>
                    setDataTextApprover2(item) + handlePickerApprover2(item)
                  }>
                  <Picker.Item label="เลือกผู้อนุมัติคนที่ 2 ..." value="" />
                  {ItemsApprover.map((item, index) => {
                    return (
                      <Picker.Item
                        key={index}
                        label={'คุณ ' + item.ThFullName}
                        value={item.ThFullName}
                      />
                    );
                  })}
                </Picker>
              </View>
            </View>

            <View style={styles.rowJob}>
              <View style={styles.rowJobDetail}>
                <Text style={styles.rowJobDetailText}>
                  <Text style={{color: 'red'}}>* </Text>
                  Approver 3st {DataTextApproverCode3}
                </Text>
                <View
                  style={{
                    position: 'relative',
                    borderBottomColor: '#fff',
                    borderBottomWidth: 0.5,
                    width: '80%',
                    top: '15%',
                  }}
                />
              </View>

              <View
                style={[
                  styles.pickerStyle,
                  {
                    overflow: 'hidden',
                  },
                ]}>
                <Picker
                  style={styles.pickerStyleDetail}
                  selectedValue={DataTextApprover3}
                  onValueChange={(item, index) =>
                    setDataTextApprover3(item) + handlePickerApprover3(item)
                  }>
                  <Picker.Item label="เลือกผู้อนุมัติคนที่ 3 ..." value="" />
                  {ItemsApprover.map((item, index) => {
                    return (
                      <Picker.Item
                        key={index}
                        label={'คุณ ' + item.ThFullName}
                        value={item.ThFullName}
                      />
                    );
                  })}
                </Picker>
              </View>
            </View>
          </View>
        ) : SelectedNumberApprover.amount4 ? (
          <View>
            <View style={styles.rowJob}>
              <View style={styles.rowJobDetail}>
                <Text style={styles.rowJobDetailText}>
                  <Text style={{color: 'red'}}>* </Text>
                  Approver 1st {DataTextApproverCode}
                </Text>
                <View
                  style={{
                    position: 'relative',
                    borderBottomColor: '#fff',
                    borderBottomWidth: 0.5,
                    width: '80%',
                    top: '15%',
                  }}
                />
              </View>

              <View
                style={[
                  styles.pickerStyle,
                  {
                    overflow: 'hidden',
                  },
                ]}>
                <Picker
                  style={styles.pickerStyleDetail}
                  selectedValue={DataTextApprover}
                  onValueChange={(item, index) =>
                    setDataTextApprover(item) + handlePickerApprover(item)
                  }>
                  <Picker.Item label="เลือกผู้อนุมัติคนที่ 1 ..." value="" />
                  {ItemsApprover.map((item, index) => {
                    return (
                      <Picker.Item
                        key={index}
                        label={'คุณ ' + item.ThFullName}
                        value={item.ThFullName}
                      />
                    );
                  })}
                </Picker>
              </View>
            </View>

            <View style={styles.rowJob}>
              <View style={styles.rowJobDetail}>
                <Text style={styles.rowJobDetailText}>
                  <Text style={{color: 'red'}}>* </Text>
                  Approver 2st {DataTextApproverCode2}
                </Text>
                <View
                  style={{
                    position: 'relative',
                    borderBottomColor: '#fff',
                    borderBottomWidth: 0.5,
                    width: '80%',
                    top: '15%',
                  }}
                />
              </View>

              <View
                style={[
                  styles.pickerStyle,
                  {
                    overflow: 'hidden',
                  },
                ]}>
                <Picker
                  style={styles.pickerStyleDetail}
                  selectedValue={DataTextApprover2}
                  onValueChange={(item, index) =>
                    setDataTextApprover2(item) + handlePickerApprover2(item)
                  }>
                  <Picker.Item label="เลือกผู้อนุมัติคนที่ 2 ..." value="" />
                  {ItemsApprover.map((item, index) => {
                    return (
                      <Picker.Item
                        key={index}
                        label={'คุณ ' + item.ThFullName}
                        value={item.ThFullName}
                      />
                    );
                  })}
                </Picker>
              </View>
            </View>

            <View style={styles.rowJob}>
              <View style={styles.rowJobDetail}>
                <Text style={styles.rowJobDetailText}>
                  <Text style={{color: 'red'}}>* </Text>
                  Approver 3st {DataTextApproverCode3}
                </Text>
                <View
                  style={{
                    position: 'relative',
                    borderBottomColor: '#fff',
                    borderBottomWidth: 0.5,
                    width: '80%',
                    top: '15%',
                  }}
                />
              </View>

              <View
                style={[
                  styles.pickerStyle,
                  {
                    overflow: 'hidden',
                  },
                ]}>
                <Picker
                  style={styles.pickerStyleDetail}
                  selectedValue={DataTextApprover3}
                  onValueChange={(item, index) =>
                    setDataTextApprover3(item) + handlePickerApprover3(item)
                  }>
                  <Picker.Item label="เลือกผู้อนุมัติคนที่ 3 ..." value="" />
                  {ItemsApprover.map((item, index) => {
                    return (
                      <Picker.Item
                        key={index}
                        label={'คุณ ' + item.ThFullName}
                        value={item.ThFullName}
                      />
                    );
                  })}
                </Picker>
              </View>
            </View>

            <View style={styles.rowJob}>
              <View style={styles.rowJobDetail}>
                <Text style={styles.rowJobDetailText}>
                  <Text style={{color: 'red'}}>* </Text>
                  Approver 4st {DataTextApproverCode4}
                </Text>
                <View
                  style={{
                    position: 'relative',
                    borderBottomColor: '#fff',
                    borderBottomWidth: 0.5,
                    width: '80%',
                    top: '15%',
                  }}
                />
              </View>

              <View
                style={[
                  styles.pickerStyle,
                  {
                    overflow: 'hidden',
                  },
                ]}>
                <Picker
                  style={styles.pickerStyleDetail}
                  selectedValue={DataTextApprover4}
                  onValueChange={(item, index) =>
                    setDataTextApprover4(item) + handlePickerApprover4(item)
                  }>
                  <Picker.Item label="เลือกผู้อนุมัติคนที่ 4 ..." value="" />
                  {ItemsApprover.map((item, index) => {
                    return (
                      <Picker.Item
                        key={index}
                        label={'คุณ ' + item.ThFullName}
                        value={item.ThFullName}
                      />
                    );
                  })}
                </Picker>
              </View>
            </View>
          </View>
        ) : null}

        {/* //////////////////////////////////////เลือกผู้อนุมัติ /////////////////////////////*/}

        <View style={[styles.rowJob, {height: '100%'}]}>
          <View style={styles.rowJobDetail}>
            <Text style={styles.rowJobDetailText}>
              <Text style={{color: 'red'}}>* </Text>Upload File
            </Text>
            <View
              style={{
                position: 'relative',
                borderBottomColor: '#fff',
                borderBottomWidth: 0.5,
                width: '80%',
                top: '15%',
              }}
            />
          </View>

          <View
            style={[
              styles.rowJobDetailBox,
              {
                flexDirection: 'row',
                justifyContent: 'center',
                alignItems: 'center',
                borderBottomEndRadius: 0,
                borderBottomStartRadius: 0,
              },
            ]}>
            <View
              style={[
                styles.btnChooseDate,
                {
                  width: 200,
                },
              ]}>
              <TouchableOpacity
                title="Upload File"
                style={{
                  flexDirection: 'column',
                  justifyContent: 'center',
                  alignItems: 'center',
                }}
                // onPress={() => chooseFile()}>
                onPress={() => setModalVisible(true)}>
                <Text
                  style={{
                    margin: 7,
                    color: '#fff',
                    fontWeight: 'bold',
                    fontSize: 14,
                  }}>
                  <Icon name="document-outline" color="white" size={20} />
                  Choose File/Take a photo
                </Text>
              </TouchableOpacity>
            </View>

            <Modal
              animationType="slide"
              transparent={true}
              visible={modalVisible}
              onRequestClose={() => {
                Alert.alert('Modal has been closed.');
                setModalVisible(!modalVisible);
              }}>
              <View style={styles.centeredView}>
                <View style={styles.modalView}>
                  <View
                    style={{
                      padding: 10,
                      left: 35,
                      alignSelf: 'flex-end',
                      top: -40,
                    }}>
                    <TouchableOpacity
                      onPress={() => setModalVisible(!modalVisible)}>
                      <Icon
                        name="close-circle-outline"
                        color="white"
                        size={30}
                      />
                    </TouchableOpacity>
                  </View>
                  <View
                    style={{
                      backgroundColor: '#00b26f',
                      height: 50,
                      borderRadius: 5,
                      width: 200,
                      marginTop: -45,
                      justifyContent: 'center',
                      alignItems: 'center',
                    }}>
                    <TouchableOpacity
                      title="Upload File"
                      style={{
                        flexDirection: 'row',
                      }}
                      onPress={() => {
                        chooseFile();
                        setModalVisible(!modalVisible);
                      }}>
                      <Icon name="document" color="white" size={25} />
                      <Text
                        style={{
                          margin: 7,
                          color: 'white',
                          fontWeight: 'bold',
                          fontSize: 14,
                        }}>
                        Choose From Library
                      </Text>
                    </TouchableOpacity>
                  </View>

                  <View
                    style={{
                      backgroundColor: '#0f52ba',
                      height: 50,
                      borderRadius: 5,
                      width: 200,
                      marginTop: 10,
                      justifyContent: 'center',
                      alignItems: 'center',
                    }}>
                    <TouchableOpacity
                      title="Upload File"
                      style={{
                        flexDirection: 'row',
                        justifyContent: 'center',
                        alignItems: 'center',
                      }}
                      onPress={() => {
                        takePhotoFromCamera();
                        setModalVisible(!modalVisible);
                      }}>
                      <Icon name="camera" color="white" size={25} />
                      <Text
                        style={{
                          margin: 7,
                          color: 'white',
                          fontWeight: 'bold',
                          fontSize: 14,
                        }}>
                        Take Photo
                      </Text>
                    </TouchableOpacity>
                  </View>
                </View>
              </View>
            </Modal>
          </View>

          <View
            style={{
              width: '100%',
              backgroundColor: '#00000030',
              alignItems: 'center',
              justifyContent: 'center',
              borderBottomEndRadius: 10,
              borderBottomStartRadius: 10,
              borderBottomWidth: 1,
              borderColor: '#3686c970',
              backgroundColor: 'white',
            }}>
            {/* {singlefile != null ? ( */}
            <ScrollView>
              {PickerFile != '' ? (
                <View
                  style={{
                    flexDirection: 'row',

                    padding: 10,
                  }}>
                  <View>
                    <View style={{flexDirection: 'column', width: '80%'}}>
                      <Text
                        style={[
                          styles.textStyle,
                          {textAlign: 'left', flexShrink: 1},
                        ]}>
                        File Name :{' '}
                        {PickerFile.path.split('/').pop()
                          ? PickerFile.path.split('/').pop()
                          : ''}
                      </Text>
                      <Text style={[styles.textStyle, {textAlign: 'left'}]}>
                        File Size :{' '}
                        {(
                          Number(PickerFile.size ? PickerFile.size : '') *
                          0.000001
                        ).toFixed(2)}{' '}
                        MB
                        {'\n'}
                      </Text>
                    </View>
                  </View>
                  <View
                    style={{
                      alignItems: 'flex-end',
                      marginVertical: 10,
                      marginBottom: 10,
                    }}>
                    <View>
                      <TouchableOpacity
                        style={{
                          backgroundColor: 'red',
                          width: 70,
                          height: 30,
                          borderRadius: 5,
                          alignItems: 'center',
                          justifyContent: 'space-around',
                          flexDirection: 'row',
                        }}
                        onPress={() => deletePickerFile()}>
                        <Text style={{color: '#ffff'}}>Delete</Text>
                        <Icon name="trash" color="white" size={18} />
                      </TouchableOpacity>
                    </View>
                  </View>
                </View>
              ) : null}
              {multipleFile.map((item, key) => (
                <View
                  key={key}
                  style={{
                    flexDirection: 'row',

                    padding: 10,
                  }}>
                  <View>
                    <View style={{flexDirection: 'column', width: '80%'}}>
                      <Text style={[styles.textStyle, {textAlign: 'left'}]}>
                        File Name:{' '}
                        {item.path.split('/').pop()
                          ? item.path.split('/').pop()
                          : ''}
                        {'\n'}
                        File Size:
                        {(
                          Number(item.size ? item.size : '') * 0.000001
                        ).toFixed(2)}{' '}
                        MB
                        {'\n'}
                      </Text>
                    </View>
                  </View>

                  <View
                    style={{
                      alignItems: 'flex-end',
                      marginVertical: 10,
                      marginBottom: 10,
                    }}>
                    <View>
                      <TouchableOpacity
                        style={{
                          backgroundColor: 'red',
                          width: 70,
                          height: 30,
                          borderRadius: 5,
                          alignItems: 'center',
                          justifyContent: 'space-around',
                          flexDirection: 'row',
                        }}
                        onPress={() => deleteMultipleFile(key)}>
                        <Text style={{color: '#ffff'}}>Delete</Text>
                        <Icon name="trash" color="white" size={18} />
                      </TouchableOpacity>
                    </View>
                  </View>
                </View>
              ))}
            </ScrollView>
            {/* //{' '}
                <Text style={styles.textStyle}>
                  // File Name: {singlefile.name ? singleFile.name : ''}
                  // {'\n'}
                  // Type: {singleFile.type ? singleFile.type : ''}
                  // {'\n'}
                  // File Size: {singleFile.size ? singleFile.size : ''}
                  // {'\n'}
                  // URI: {singleFile.uri ? singleFile.uri : ''}
                  // {'\n'}
                  //{' '}
                </Text> */}
            {/* ) : null} */}
          </View>
        </View>
      </ScrollView>

      <View style={styles.btnView}>
        <TouchableOpacity
          style={{flexDirection: 'row'}}
          onPress={() => handleSave()}>
          <Icon name="save-outline" color="#fff" size={25} />
          <Text
            style={[
              styles.btnViewText,
              {fontFamily: 'Kanit-Medium', color: '#fff'},
            ]}>
            Save
          </Text>
        </TouchableOpacity>
      </View>
    </Animatable.View>
  );
}
